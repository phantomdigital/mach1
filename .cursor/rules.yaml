rules:
  - name: "TypeScript and React Best Practices"
    description: "Follow TypeScript and React best practices for the project"
    patterns:
      - "Always use TypeScript for type safety"
      - "Use functional components with hooks"
      - "Prefer const over let when variables won't be reassigned"
      - "NEVER use 'any' type - use proper TypeScript types"
      - "Import types from '@/types.generated' for all Prismic content types"
      - "Use generated Prismic types like HeaderDocumentDataNavigationItem, HeaderDocumentDataButtonsItem"
      - "Run 'npm run generate-types' after making Prismic schema changes"
      - "Always import types with 'import type' for type-only imports"
      
  - name: "Prismic Integration"
    description: "Properly integrate with Prismic CMS"
    patterns:
      - "Use @prismicio/next components for links and images"
      - "Always handle loading and error states when fetching from Prismic"
      - "Use createClient() for API calls"
      - "Run 'npm run slicemachine' to edit slices"
      - "Run 'npm run generate-types' after making Prismic custom type changes"
      - "NEVER hardcode content - ALWAYS use Prismic fields"
      - "Only show content when Prismic fields have data"
      - "Provide minimal fallbacks when Prismic document is missing"
      - "Use proper TypeScript types from generated types.ts"
      
  - name: "Tailwind CSS Usage"
    description: "Follow Tailwind CSS conventions"
    patterns:
      - "Use Tailwind utility classes for styling"
      - "Avoid inline styles unless absolutely necessary"
      - "Use responsive utilities (sm:, md:, lg:, xl:)"
      - "Maintain consistent spacing using Tailwind's spacing scale"
      - "For SVG styling: use 'currentColor' for fills/strokes and set color via text-* classes on container"
      - "Never put Tailwind class names directly in SVG fill/stroke attributes - use CSS classes instead"
      
  - name: "Component Structure"
    description: "Maintain clean component architecture"
    patterns:
      - "Keep components focused and single-responsibility"
      - "Use async/await for data fetching in server components"
      - "Place reusable components in app/components"
      - "Use proper error boundaries and fallbacks"
      
  - name: "Next.js 14 App Router"
    description: "Follow Next.js 14 App Router conventions"
    patterns:
      - "Use server components by default"
      - "Add 'use client' directive only when needed"
      - "Leverage streaming and suspense for better UX"
      - "Use metadata API for SEO"
      
  - name: "Server/Client Component Separation"
    description: "Maintain clean separation between server and client components"
    patterns:
      - "MAIN components (like header.tsx, footer.tsx) MUST BE SERVER components"
      - "When client functionality is needed, create separate kebab-case files in same folder"
      - "Import client components into server components, never the reverse"
      - "Use descriptive kebab-case names for client components (e.g., navigation-dropdown.tsx)"
      - "Keep server components for data fetching and layout, client components for interactivity"
      - "Minimize client component boundaries - only make interactive parts client components"
      - "Pass data from server to client components via props, not context when possible"
      
  - name: "shadcn/ui Integration"
    description: "Use shadcn/ui components for consistent UI design"
    patterns:
      - "ALWAYS prefer shadcn/ui components over custom UI elements"
      - "Use Button component for all buttons instead of custom button styling"
      - "Use DropdownMenu for dropdown functionality instead of manual state management"
      - "Import components from '@/components/ui/' directory"
      - "Use 'asChild' prop when wrapping shadcn components with other elements"
      - "Leverage shadcn variants (outline, ghost, secondary, etc.) for consistent styling"
      - "Use lucide-react icons with shadcn components"
      - "Follow shadcn/ui composition patterns for complex components"
      - "NEVER use 'export *' in client boundaries - always use named exports"
      - "When using HeroButton in server components, create separate client component wrapper"
      
  - name: "Container Standards"
    description: "Consistent container and layout patterns across all components"
    patterns:
      - "ALWAYS use standard container pattern: 'w-full max-w-[100rem] mx-auto px-4 lg:px-8'"
      - "ALL components must align exactly with header container width"
      - "Container breakdown: w-full (full width up to max), max-w-[100rem] (1600px max), mx-auto (centered), px-4 lg:px-8 (responsive padding)"
      - "Use this pattern for Hero, content sections, footer, and all page components"
      - "Padding: px-4 (16px) on mobile/tablet, lg:px-8 (32px) on large screens"
      - "For full-width backgrounds: apply container inside the background element"
      - "Avoid nested containers - use the pattern once per section"
      - "Test alignment by comparing with header logo and navigation positioning"
      - "Easy width adjustments: change max-w-[100rem] to max-w-[80rem] or max-w-[120rem] as needed"
      
  - name: "SEO and Metadata Best Practices"
    description: "Comprehensive SEO metadata implementation for MACH1 Logistics"
    patterns:
      - "ALWAYS use generateMetadata() function for dynamic metadata in pages"
      - "Import and use generatePrismicMetadata() for all Prismic-based pages"
      - "Use generateMetadata() from @/lib/metadata for custom metadata needs"
      - "Company name is 'MACH1 Logistics' - use consistently across all metadata"
      - "Include structured data (JSON-LD) for organization and breadcrumbs where appropriate"
      - "All titles should follow pattern: 'Page Title | MACH1 Logistics'"
      - "Descriptions should be 150-160 characters, include relevant keywords naturally"
      - "Use logistics-related keywords: freight, transportation, import/export, FCL, LCL, dangerous goods"
      - "Include Open Graph and Twitter Card metadata for social sharing"
      - "Set canonical URLs for all pages to prevent duplicate content"
      - "Use proper robots meta tags - index: true for public pages"
      - "Include publishedTime and modifiedTime for articles/solutions"
      - "Generate keyword arrays from UID slugs and content context"
      - "Solutions pages should use type: 'article' for Open Graph"
      - "Homepage and general pages should use type: 'website'"
      - "Always include alt text for Open Graph images"
      - "Set proper locale (en_AU) for Australian business context"

  - name: "Slice Layout Standards"
    description: "Consistent layout patterns for all Prismic slices"
    patterns:
      - "ALL slices must use consistent container and header structure for visual continuity"
      - "Section wrapper: 'w-full py-16 lg:py-24 bg-white'"
      - "Container: 'w-full mt-48 mx-auto px-4 lg:px-20' (matches Locations slice pattern)"
      - "Header structure: mb-16 margin, subheading with JetBrains Mono font, main heading with Inter Tight"
      - "Subheading styling: 'text-neutral-800 text-sm font-medium mb-4' with fontFamily: 'var(--font-jetbrains-mono)'"
      - "Main heading styling: 'text-neutral-800 text-4xl lg:text-6xl font-bold font-inter-tight leading-tight'"
      - "Always check slice.primary.subheading and slice.primary.heading before rendering"
      - "Use same padding and margin patterns across all slices for alignment consistency"
      - "Content sections should follow the header with appropriate spacing (typically mb-16 or space-y-24)"
      - "When creating new slices, copy the exact container and header structure from Locations slice"

  - name: "Typography and Semantic HTML"
    description: "Global font system using semantic HTML tags"
    patterns:
      - "Use semantic HTML tags (h1-h6, p) for typography - fonts are applied globally in globals.css"
      - "h5 tags: Use for subheadings/labels - automatically styled with JetBrains Mono (monospace)"
      - "h1, h2, h3, h4, h6 tags: Use for main headings - automatically styled with Inter Tight (sans-serif), font-weight: 700"
      - "p tags: Use for body text/paragraphs - automatically styled with Inter Tight (sans-serif), font-weight: 400"
      - "NEVER add inline fontFamily styles - let global CSS handle font families"
      - "Only add Tailwind classes for sizing, colors, spacing, and weights - not font families"
      - "Pattern: Subheading (h5) + Main heading (h1/h2) + Description (p)"
      - "For buttons and special UI: Use var(--font-jetbrains-mono) for monospace consistency"
      - "Global font setup in globals.css @layer base ensures consistent typography across entire site"
      
  - name: "Hover States and Interactive Elements"
    description: "Consistent hover effects and interactive element styling"
    patterns:
      - "For text underlines on hover: Use 'border-b-2 border-transparent hover:border-dark-blue' instead of 'underline'"
      - "Underline transition: 'transition-all duration-150 ease-out' for smooth animation"
      - "This creates a bottom border that animates from transparent to dark-blue on hover"
      - "Apply this pattern to navigation items, cards, links, and all interactive text elements"
      - "Vertical hover bars: Use 'origin-bottom scale-y-0 group-hover:scale-y-100' for bottom-to-top animation"
      - "Icon reveals on hover: Use 'opacity-0 group-hover:opacity-100 transition-opacity duration-200'"
      - "Maintain consistency with header navigation hover patterns across all components"
      
  - name: "Development Environment"
    description: "Development server and environment management"
    patterns:
      - "NEVER run 'npm run dev' - development server is already running"
      - "NEVER run 'npm run build' unless explicitly requested by user"
      - "Don't start duplicate development processes"
      - "Check if processes are already running before starting new ones"
      - "Use background: false for commands that should complete and exit"
