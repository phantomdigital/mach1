rules:
  - name: "TypeScript and React Best Practices"
    description: "Follow TypeScript and React best practices for the project"
    patterns:
      - "Always use TypeScript for type safety"
      - "Use functional components with hooks"
      - "Prefer const over let when variables won't be reassigned"
      - "NEVER use 'any' type - use proper TypeScript types"
      - "Import types from '@/types.generated' for all Prismic content types"
      - "Use generated Prismic types like HeaderDocumentDataNavigationItem, HeaderDocumentDataButtonsItem"
      - "Run 'npm run generate-types' after making Prismic schema changes"
      - "Always import types with 'import type' for type-only imports"
      
  - name: "Prismic Integration"
    description: "Properly integrate with Prismic CMS"
    patterns:
      - "Use @prismicio/next components for links and images"
      - "Always handle loading and error states when fetching from Prismic"
      - "Use createClient() for API calls"
      - "Run 'npm run slicemachine' to edit slices"
      - "Run 'npm run generate-types' after making Prismic custom type changes"
      - "NEVER hardcode content - ALWAYS use Prismic fields"
      - "Only show content when Prismic fields have data"
      - "Provide minimal fallbacks when Prismic document is missing"
      - "Use proper TypeScript types from generated types.ts"
      
  - name: "Tailwind CSS Usage"
    description: "Follow Tailwind CSS conventions"
    patterns:
      - "Use Tailwind utility classes for styling"
      - "Avoid inline styles unless absolutely necessary"
      - "Use responsive utilities (sm:, md:, lg:, xl:)"
      - "Maintain consistent spacing using Tailwind's spacing scale"
      - "For SVG styling: use 'currentColor' for fills/strokes and set color via text-* classes on container"
      - "Never put Tailwind class names directly in SVG fill/stroke attributes - use CSS classes instead"
      
  - name: "Component Structure"
    description: "Maintain clean component architecture"
    patterns:
      - "Keep components focused and single-responsibility"
      - "Use async/await for data fetching in server components"
      - "Place reusable components in app/components"
      - "Use proper error boundaries and fallbacks"
      
  - name: "Next.js 14 App Router"
    description: "Follow Next.js 14 App Router conventions"
    patterns:
      - "Use server components by default"
      - "Add 'use client' directive only when needed"
      - "Leverage streaming and suspense for better UX"
      - "Use metadata API for SEO"
      
  - name: "Server/Client Component Separation"
    description: "Maintain clean separation between server and client components"
    patterns:
      - "MAIN components (like header.tsx, footer.tsx) MUST BE SERVER components"
      - "When client functionality is needed, create separate kebab-case files in same folder"
      - "Import client components into server components, never the reverse"
      - "Use descriptive kebab-case names for client components (e.g., navigation-dropdown.tsx)"
      - "Keep server components for data fetching and layout, client components for interactivity"
      - "Minimize client component boundaries - only make interactive parts client components"
      - "Pass data from server to client components via props, not context when possible"
      - "Mobile menu must receive all header data: navigation, buttons, AND subheader_items"
      - "Ensure mobile menu parity with desktop - all links should be accessible on mobile"
      
  - name: "shadcn/ui Integration"
    description: "Use shadcn/ui components for consistent UI design"
    patterns:
      - "ALWAYS prefer shadcn/ui components over custom UI elements"
      - "Use Button component for all buttons instead of custom button styling"
      - "Use DropdownMenu for dropdown functionality instead of manual state management"
      - "Import components from '@/components/ui/' directory"
      - "Use 'asChild' prop when wrapping shadcn components with other elements"
      - "Leverage shadcn variants (outline, ghost, secondary, etc.) for consistent styling"
      - "Use lucide-react icons with shadcn components"
      - "Follow shadcn/ui composition patterns for complex components"
      - "NEVER use 'export *' in client boundaries - always use named exports"
      - "When using HeroButton in server components, create separate client component wrapper"
      - "Use Button variant='hero' for secondary buttons that complement the animated HeroButton"
      - "Hero variant: Uses JetBrains Mono font, neutral-800 bg, uppercase text, tracking-wide"
      - "Hero variant automatically applies font styling - no need for inline fontFamily"
      
  - name: "Container Standards"
    description: "Consistent container and layout patterns across all components"
    patterns:
      - "ALWAYS use standard container pattern: 'w-full max-w-[110rem] mx-auto px-4 lg:px-8'"
      - "ALL components must align exactly with header container width"
      - "Container breakdown: w-full (full width up to max), max-w-[110rem], mx-auto (centered), px-4 lg:px-8 (responsive padding)"
      - "Use this pattern for Hero, content sections, footer, and all page components"
      - "Padding: px-4 (16px) on mobile/tablet, lg:px-8 (32px) on large screens"
      - "For full-width backgrounds: apply container inside the background element"
      - "Avoid nested containers - use the pattern once per section"
      - "Test alignment by comparing with header logo and navigation positioning"
      - "Easy width adjustments: change max-w-[110rem] to max-w-[80rem] or max-w-[120rem] as needed"
      
  - name: "SEO and Metadata Best Practices"
    description: "Comprehensive SEO metadata implementation for MACH 1 Logistics"
    patterns:
      - "ALWAYS use generateMetadata() function for dynamic metadata in pages"
      - "Import and use generatePrismicMetadata() for all Prismic-based pages"
      - "Use generateMetadata() from @/lib/metadata for custom metadata needs"
      - "Company name is 'MACH 1 Logistics' - use consistently across all metadata"
      - "Include structured data (JSON-LD) for organization and breadcrumbs where appropriate"
      - "All titles should follow pattern: 'Page Title | MACH 1 Logistics'"
      - "Descriptions should be 150-160 characters, include relevant keywords naturally"
      - "Use logistics-related keywords: freight, transportation, import/export, FCL, LCL, dangerous goods"
      - "Include Open Graph and Twitter Card metadata for social sharing"
      - "Set canonical URLs for all pages to prevent duplicate content"
      - "Use proper robots meta tags - index: true for public pages"
      - "Include publishedTime and modifiedTime for articles/solutions"
      - "Generate keyword arrays from UID slugs and content context"
      - "Solutions pages should use type: 'article' for Open Graph"
      - "Homepage and general pages should use type: 'website'"
      - "Always include alt text for Open Graph images"
      - "Set proper locale (en_AU) for Australian business context"

  - name: "Slice Layout Standards"
    description: "Consistent layout patterns for all Prismic slices"
    patterns:
      - "ALL slices must use consistent container and header structure for visual continuity"
      - "Section wrapper: 'w-full py-16 lg:py-24 bg-white'"
      - "Container: 'w-full mt-48 mx-auto px-4 lg:px-20' (matches Locations slice pattern)"
      - "Header structure: mb-16 margin, subheading with JetBrains Mono font, main heading with Inter Tight"
      - "Subheading styling: 'text-neutral-800 text-sm font-medium mb-4' with fontFamily: 'var(--font-jetbrains-mono)'"
      - "Main heading styling: 'text-neutral-800 text-4xl lg:text-6xl font-bold font-inter-tight leading-tight'"
      - "Always check slice.primary.subheading and slice.primary.heading before rendering"
      - "Use same padding and margin patterns across all slices for alignment consistency"
      - "Content sections should follow the header with appropriate spacing (typically mb-16 or space-y-24)"
      - "When creating new slices, copy the exact container and header structure from Locations slice"
      - "Responsive margin top: Use smaller margins on mobile (e.g., mt-30 lg:mt-48) for better mobile spacing"
      - "Margin top scale: none (mt-0), small (mt-6 lg:mt-12), medium (mt-12 lg:mt-24), large (mt-30 lg:mt-48), extra-large (mt-40 lg:mt-64)"
      - "Responsive content width: Always full width on mobile (w-full), apply constraints only on desktop (e.g., w-full lg:w-1/2)"
      - "Content width scale: full (w-full), three-quarters (w-full lg:w-3/4), two-thirds (w-full lg:w-2/3), half (w-full lg:w-1/2), one-third (w-full lg:w-1/3)"

  - name: "Typography and Semantic HTML"
    description: "Global font system using semantic HTML tags"
    patterns:
      - "Use semantic HTML tags (h1-h6, p) for typography - fonts are applied globally in globals.css"
      - "h5 tags: Use for subheadings/labels - automatically styled with JetBrains Mono (monospace)"
      - "h1, h2, h3, h4, h6 tags: Use for main headings - automatically styled with Inter Tight (sans-serif), font-weight: 700"
      - "p tags: Use for body text/paragraphs - automatically styled with Inter Tight (sans-serif), font-weight: 400"
      - "NEVER add inline fontFamily styles - let global CSS handle font families"
      - "Only add Tailwind classes for sizing, colors, spacing, and weights - not font families"
      - "Pattern: Subheading (h5) + Main heading (h1/h2) + Description (p)"
      - "For buttons and special UI: Use var(--font-jetbrains-mono) for monospace consistency"
      - "Global font setup in globals.css @layer base ensures consistent typography across entire site"
      
  - name: "Hover States and Interactive Elements"
    description: "Consistent hover effects and interactive element styling"
    patterns:
      - "For text underlines on hover: Use 'border-b-2 border-transparent hover:border-dark-blue' instead of 'underline'"
      - "Underline transition: 'transition-all duration-150 ease-out' for smooth animation"
      - "This creates a bottom border that animates from transparent to dark-blue on hover"
      - "Apply this pattern to navigation items, cards, links, and all interactive text elements"
      - "Vertical hover bars: Use 'origin-bottom scale-y-0 group-hover:scale-y-100' for bottom-to-top animation"
      - "Icon reveals on hover: Use 'opacity-0 group-hover:opacity-100 transition-opacity duration-200'"
      - "Maintain consistency with header navigation hover patterns across all components"

  - name: "News System"
    description: "News articles and newsroom features"
    patterns:
      - "Article fields: category, article_type, featured, author (content relationship)"
      - "Uses first_publication_date for automatic dating"
      - "News slice filters: by category and by year"
      - "Featured hero: Large 2-column layout for featured articles"
      - "Load more: Client-side pagination with button"
      - "Components: FeaturedHero (hero), NewsCard (cards), NewsClient (load more)"
      - "Article types: Article, Press Release, Update, Announcement, Event"
      
  - name: "Development Environment"
    description: "Development server and environment management"
    patterns:
      - "NEVER run 'npm run dev' - development server is already running"
      - "NEVER run 'npm run build' unless explicitly requested by user"
      - "Don't start duplicate development processes"
      - "Check if processes are already running before starting new ones"
      - "Use background: false for commands that should complete and exit"
      
  - name: "Image Carousel Component"
    description: "Infinite scrolling carousel with GSAP animations"
    patterns:
      - "Uses GSAP for smooth infinite loop animation"
      - "Clipped edges: polygon clip-path with 20px angled corners matching site design"
      - "Fixed image width, proportional height based on aspect ratio"
      - "Pause on hover: Animation smoothly slows down (timeScale: 0)"
      - "Configurable: image_width (px), gap (px), scroll_speed (multiplier)"
      - "Duplicate tracks for seamless looping without gaps"
      - "Uses spacing utilities: getSectionWrapperClass, getContainerClass"
      - "Full-width carousel breaks out of container for edge-to-edge effect"
      - "Header (heading + description) stays within container alignment"

  - name: "Error Pages and Not Found"
    description: "Custom 404 and error page design patterns"
    patterns:
      - "Use app/not-found.tsx for site-wide 404 pages"
      - "Follow consistent design language with clipped shape containers"
      - "Include error badge, heading, description, and helpful navigation links"
      - "Use HeroButton components for primary actions"
      - "Provide multiple navigation options (home, careers, solutions, quote)"
      - "Set metadata with robots: {index: false, follow: true} for SEO"
      - "Center content vertically and horizontally with proper spacing"
      - "Include helpful links section with relevant site sections"

  - name: "Legal Content Slice"
    description: "Legal pages (Terms of Service, Privacy Policy) with table of contents"
    patterns:
      - "Main index.tsx is SERVER component - handles data and layout"
      - "Interactive table of contents is in separate table-of-contents.tsx client component"
      - "Header with dates is in legal-header.tsx client component (uses context)"
      - "Uses legal-dates-context.tsx to pass first_publication_date and last_publication_date from page"
      - "Table of contents uses useLenis hook for smooth scrolling to sections"
      - "Custom JSX serializer adds IDs to h2 and h3 headings for anchor links"
      - "Dates automatically pulled from Prismic document metadata"
      - "Date formatting uses lib/date-utils.ts: formatAuDate() and formatLegalDates()"
      - "Rich text prose styling: disable font-variant-ligatures to prevent (c) → © conversion"
      - "Link styling matches site pattern: hover:text-dark-blue hover:underline transition-colors"

  - name: "Date Utilities"
    description: "Consistent date formatting across the application"
    patterns:
      - "Use formatAuDate() from @/lib/date-utils for Australian date format"
      - "Use formatLegalDates() for legal document date ranges"
      - "Format: 'en-AU' locale with full month names (e.g., '15 October 2024')"
      - "Legal dates show update and effective dates when different"
      - "Always import from @/lib/date-utils instead of repeating formatting code"
